---
layout: single
title:  "Permutation Check C++"
---

## 순열 검사

#### 문제 설명
길이가 n인 배열에 1부터 n까지 숫자가 중복 없이 한 번씩 들어 있는지를 확인하려고 합니다.
1부터 n까지 숫자가 중복 없이 한 번씩 들어 있는 경우 true를, 아닌 경우 false를 반환하도록 함수 solution을 완성해주세요.

#### 제한사항
- 배열의 길이는 10만 이하입니다.
- 배열의 원소는 0 이상 10만 이하인 정수입니다.

### 1. DAT사용
```cpp
#include <vector>
#include <iostream>
using namespace std;

bool solution(vector<int> arr)
{
    // 배열의 원소는 0이상 10만 이하인 정수
    int DAT[10000000]={0}; // 0으로 초기화 필수
    
    // 1. DAT에 기록하며 중복 있을 경우 return false
    for (int i=0;i<arr.size();++i)
    {
        // 이전에 들어있던 값이 나왔다면 false
        if (DAT[arr[i]]>0) return false;
        
        // 값을 DAT에 넣어주기
        DAT[arr[i]]=1;
    }
    
    // 2. 1부터 n까지 모두 들어있는지 판단
    for (int i=1;i<=arr.size();i++)
        if (DAT[i]==0) return false;

    // 두 조건을 만족하면 return true
    return true;
}
```
단점 : 답은 나오지만 효율성이 낮음

### 2. 정렬 사용
```cpp
#include <vector>
#include <iostream>
#include <algorithm> // 정렬 사용을 위한 헤더 추가
using namespace std;

bool solution(vector<int> arr)
{
    sort(arr.begin(),arr.end()); // 오름차순 정렬
    
    for (int i=0;i<arr.size();i++)
    {
        // arr내 숫자는 1부터 n까지
        // 모든 수가 중복 없이 한번씩 들어 있는지 한번에 판별 가능
        if (arr[i]!=i+1) return false;
    }
    
    return true;
}
```
